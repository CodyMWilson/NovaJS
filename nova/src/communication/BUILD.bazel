package(default_visibility = ["//visibility:public"])


load("@npm_bazel_typescript//:index.bzl", "ts_library")

ts_library(
    name = "communication_lib",
    srcs = [
        #"RpcChannel.ts",
        "Channel.ts",
        "Communicator.ts",
        "SocketMessage.ts",
        #"GetChanges.ts",
        #"OverwriteState.ts",
        #"FilterDelta.ts",
        #"getKeyDelta.ts",
    ],
    deps = [
        "@npm//rxjs",
        #"@npm//protobufjs",
        "@npm//io-ts",
        "@npm//immer",
        "//nova/src/ecs/plugins",
        #"//nova/src/proto:protobufjs_bundle",
        #"//nova/src/engine",
        #"//nova/src/engine:utils",
        #"//nova/src/common",
    ]
)

ts_library(
    name = "communication_server_lib",
    srcs = [
        "SocketChannelServer.ts",
        "CommunicatorServer.ts",
    ],
    deps = [
        ":communication_lib",
        "@npm//@types/node",
        "@npm//uuid",
        "@npm//@types/uuid",
        "@npm//rxjs",
        "@npm//ws",
        "@npm//@types/ws",
        #"@npm//google-protobuf",
        #"@npm//@types/google-protobuf",
        "@npm//fp-ts",
        "//nova/src/ecs/plugins",
        #"//nova/src/common",
        #"//nova/src/engine",
        #"//nova/src/engine:utils",
    ]
)

ts_library(
    name = "communication_client_lib",
    srcs = [
        "SocketChannelClient.ts",
        "CommunicatorClient.ts",
    ],
    deps = [
        ":communication_lib",
        #"@npm//protobufjs",
        "@npm//@types/node",
        "@npm//uuid",
        "@npm//@types/uuid",
        "@npm//rxjs",
        "@npm//fp-ts",
        "//nova/src/ecs/plugins",
        #"//nova/src/common",
        #"//nova/src/engine",
        #"//nova/src/engine:utils",
        #"//nova/src/proto:protobufjs_bundle",
    ]
)
